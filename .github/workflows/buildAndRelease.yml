name: Xcode - Build, Archive, Copy App, Zip and Release

on:
  # 依然建议只在推送 Tag 时触发 Release 流程
  push:
    tags:
      - 'v*' # 匹配所有以 'v' 开头的 Tag

jobs:
  build_and_release:
    name: Build, Archive, Copy App, Zip and create Release
    runs-on: macos-15 # 或 macos-latest

    steps:
      - name: Checkout # 步骤 1: 检出代码
        uses: actions/checkout@v4

      - name: Show Xcode version # 步骤 2: 显示 Xcode 版本
        run: xcodebuild -version

      # 步骤 3: 确定默认 Scheme (保留原逻辑，但请注意此方法可能不够健壮)
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "$default" > default
          echo "Using default scheme: $default"

      # 步骤 4: 确定项目文件类型 (.xcodeproj 或 .xcworkspace) 和路径
      - name: Set Project/Workspace File
        run: |
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then
            echo "FILETYPE_PARAMETER=workspace" >> $GITHUB_ENV
            echo "FILE_TO_BUILD=`ls -A | grep -i \\.xcworkspace\$ | awk '{$1=$1;print}'`" >> $GITHUB_ENV
          elif [ "`ls -A | grep -i \\.xcodeproj\$`" ]; then
            echo "FILETYPE_PARAMETER=project" >> $GITHUB_ENV
            echo "FILE_TO_BUILD=`ls -A | grep -i \\.xcodeproj\$ | awk '{$1=$1;print}'`" >> $GITHUB_ENV
          else
            echo "Error: No .xcworkspace or .xcodeproj found"
            exit 1
          fi
          echo "Detected file type: ${{ env.FILETYPE_PARAMETER }}"
          echo "Detected file path: ${{ env.FILE_TO_BUILD }}"

      # 步骤 5: 清理并归档项目 (Archive)
      - name: Clean and Archive
        env:
          SCHEME: ${{ 'default' }}
          ARCHIVE_PATH: ${{ runner.temp }}/build/MyApp.xcarchive # 指定归档文件输出路径
        run: |
          if [ "$SCHEME" = "default" ]; then SCHEME=$(cat default); fi

          xcodebuild clean archive \
            -scheme "$SCHEME" \
            -"${{ env.FILETYPE_PARAMETER }}" "${{ env.FILE_TO_BUILD }}" \
            -archivePath "$ARCHIVE_PATH" \
            # 注意：Archive 步骤仍然需要签名，但具体的签名配置通常在项目设置中
            # 如果需要在这里覆盖，请小心处理
            # CODE_SIGN_IDENTITY="Apple Development" \
            # PROVISIONING_PROFILE="YOUR_PROVISIONING_PROFILE_UUID" \
            #| xcpretty

          # 检查归档是否成功
          if [ ! -d "$ARCHIVE_PATH" ]; then
            echo "Error: Archive failed. Archive path not found: $ARCHIVE_PATH"
            exit 1
          fi
          echo "Archive created at: $ARCHIVE_PATH"

      # 6: 从 Archive 中复制 .app 包 (模拟 "Copy App")
      - name: Copy App Bundle from Archive
        env:
          ARCHIVE_PATH: ${{ runner.temp }}/build/MyApp.xcarchive
          EXPORT_DIR: ${{ runner.temp }}/dist # 指定导出目录
        run: |
          mkdir -p "$EXPORT_DIR" # 创建导出目录

          # 在 Archive 中查找 .app 文件，通常位于 Products/Applications/
          APP_BUNDLE_PATH=$(find "$ARCHIVE_PATH/Products/Applications" -maxdepth 1 -name "*.app" | head -n 1)

          if [ -z "$APP_BUNDLE_PATH" ]; then
            echo "Error: .app bundle not found in $ARCHIVE_PATH/Products/Applications"
            exit 1
          fi

          # 获取 .app 文件的名称
          APP_BUNDLE_NAME=$(basename "$APP_BUNDLE_PATH")
          # 确定复制 .app 的目标路径
          COPIED_APP_PATH="$EXPORT_DIR/$APP_BUNDLE_NAME"

          echo "Found app bundle: $APP_BUNDLE_PATH"
          echo "Copying to: $COPIED_APP_PATH"

          # 复制 .app 目录
          cp -R "$APP_BUNDLE_PATH" "$COPIED_APP_PATH"

          # 将复制后的 .app 路径保存到环境变量，供后续步骤使用
          echo "COPIED_APP_PATH=$COPIED_APP_PATH" >> $GITHUB_ENV
          echo "COPIED_APP_NAME=$APP_BUNDLE_NAME" >> $GITHUB_ENV # 保存 app 名称用于 zip 文件命名

      # 步骤 7: 将 .app 包打包成 Zip 文件
      - name: Zip App Bundle
        env:
          COPIED_APP_PATH: ${{ env.COPIED_APP_PATH }} # 来自上一步骤的环境变量
          COPIED_APP_NAME: ${{ env.COPIED_APP_NAME }} # 来自上一步骤的环境变量
          EXPORT_DIR: ${{ runner.temp }}/dist # 导出目录
        run: |
          if [ -z "$COPIED_APP_PATH" ]; then
            echo "Error: COPIED_APP_PATH is not set. Cannot zip."
            exit 1
          fi

          # 切换到导出目录，以便 zip 命令在正确的位置创建文件
          cd "$EXPORT_DIR"

          # 使用 zip 命令打包 .app 目录
          # -r 表示递归打包子目录
          # -y 表示保留符号链接 (重要，否则可能导致 app 无法运行)
          # --symlinks 也表示保留符号链接 (zip 命令的另一个选项，取决于系统)
          # 确保 zip 文件名是 .app 名称加上 .zip 后缀
          ZIP_FILE_NAME="${COPIED_APP_NAME}.zip"
          zip -r -y "$ZIP_FILE_NAME" "$(basename "$COPIED_APP_PATH")"

          # 将生成的 zip 文件路径保存到环境变量
          ZIP_FILE_PATH="$EXPORT_DIR/$ZIP_FILE_NAME"
          echo "ZIP_FILE_PATH=$ZIP_FILE_PATH" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
          echo "App bundle zipped to: $ZIP_FILE_PATH"

      # 步骤 8: 创建 GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1 # 或更高版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Build from tag ${{ github.ref_name }}
            Automated release process (Copy App method).
          draft: false
          prerelease: false

      # 步骤 9: 上传 Zip 文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1 # 或更高版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_FILE_PATH }} # 上传 zip 文件
          asset_name: ${{ env.ZIP_FILE_NAME }} # 使用 zip 文件名作为 asset 名称
          asset_content_type: application/zip # 指定 MIME 类型为 zip

